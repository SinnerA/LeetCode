/*
The set [1,2,3,бн,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order,
We get the following sequence (ie, for n = 3):

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note: Given n will be between 1 and 9 inclusive.

Tags: Backtracking Math
*/

/*
??1:??????
??????????????(LeetCode:Permutations),??????????????,????1,2,3,?????:
1 2 3
1 3 2
2 1 3
2 3 1
3 2 1
3 1 2
?3???????,?????1?3????3 2 1,???????,??3 2 1???3???????,???3 1 2. 
?????????,?????1 3 ??,?????3???1???,?????????3???????3 1 2?
*/
class Solution {
public:
    string getPermutation(int n, int k) {
        string str = string("123456789").substr(0, n);
		int index = 0, cnt = 0;
		string res;
		permutationRecur(res, str, index, cnt, k);
		return res;
    }
	bool permutationRecur(string &res, string &str, int index, int cnt, int k){
		if(index = str.size() - 1){
			cnt++;
			if(cnt == k){
				res = str;
				return true;
			}
		} else {
			for(int i = index; i < str.size(); i++){
				rotate(&str[index], &str[i], &str[i+1]);
				if(permutationRecur(res, str, index+1, cnt, k))
					return true;
				rotate(&str[index], &str[i], &str[i+1]);
			}
		}
		return false;
	}
};

/*
??2:?????????????,????????????,????????k????????n = 4,k = 17??,??src = [1,2,3,...,n]?

?17????????????:????????????????? = (n-1)! = 3! = 6, ??1?2???????6*2 = 12?,12 < 17, 
???17????????????1??2,6*3 > 17, ???17?????????3???17????????????(???????)??m = upper(17/6) = 3(upper??????)???

???????,???src???????,?????????src??????k - (m-1)*(n-1)! = 17 - 2*6 = 5???,?????????????
*/
class Solution {
public:
    string getPermutation(int n, int k) {
        string str = string("123456789").substr(0, n);
		string res(n, ' ');
		//?????????
		for(int i = 0; i < n; i++)
			res[i] = helper(str, k);
		return res;
    }
	
	//?s??????????,???k?????????,????s????
    //s???????
	char helper(string &str, int &k){
		int tmp = factorial(str.size() - 1), i = (k - 1) / tmp;
		char res = str[i];
		str.erase(i, 1);//??str
		k -= i * tmp;   //??k
		return res;
	}
	
	//????n???
	int factorial(int n){
		int res = 1;
		for(int i = 2; i <= n; i++)
			res *= i;
		return res;
	}
};

//???
class Solution {
public:
    string getPermutation(int n, int k) {
        string str = string("123456789").substr(0, n);
		string res(n, ' ');
		int tmp, index;
		//?????????
		for(int i = 0; i < n; i++){
			tmp = factorial(str.size() - 1);
			index = (k - 1) / tmp;
			res[i] = str[index];
			str.erase(index, 1);//??str
			k -= index * tmp;   //??k
		}
		return res;
    }
	
	//????n???
	int factorial(int n){
		int res = 1;
		for(int i = 2; i <= n; i++)
			res *= i;
		return res;
	}
};